10.8*12+10
f = function(x) {
x ^ 2
}
get_sim_data = function(f, sample_size = 100) {
x = runif(n = sample_size, min = 0, max = 1)
y = rnorm(n = sample_size, mean = f(x), sd = 0.3)
data.frame(x, y)
}
get_sim_data
set.seed(1)
sim_data = get_sim_data(f)
sim_data
plot(sim_data$x, sim_data$y)
ggplot(sim_data,aes(x.plot, y.plot)) +
stat_summary(fun.data=mean_cl_normal) +
geom_smooth(method='lm', formula= y ~ poly(x, degree = 1))
library(tidyverse)
ggplot(sim_data,aes(x.plot, y.plot)) +
stat_summary(fun.data=mean_cl_normal) +
geom_smooth(method='lm', formula= y ~ poly(x, degree = 1))
ggplot(sim_data,aes(x, y)) +
stat_summary(fun.data=mean_cl_normal) +
geom_smooth(method='lm', formula= y ~ poly(x, degree = 1))
ggplot(sim_data,aes(x, y)) +
stat_summary(fun.data=mean_cl_normal) +
geom_smooth(method='lm', formula= y ~ poly(x, degree = 1),se=FALSE)
ggplot(sim_data,aes(x, y)) +
stat_summary(fun.data=mean_cl_normal) +
geom_smooth(method='lm', formula= y ~ poly(x, degree = 9),se=FALSE)+theme_bw()
set.seed(1)
n_sims = 250
n_models = 4
x = data.frame(x = 0.90) # fixed point at which we make predictions
predictions = matrix(0, nrow = n_sims, ncol = n_models)
for (sim in 1:n_sims) {
# simulate new, random, training data
# this is the only random portion of the bias, var, and mse calculations
# this allows us to calculate the expectation over D
sim_data = get_sim_data(f)
# fit models
fit_0 = lm(y ~ 1,                   data = sim_data)
fit_1 = lm(y ~ poly(x, degree = 1), data = sim_data)
fit_2 = lm(y ~ poly(x, degree = 2), data = sim_data)
fit_9 = lm(y ~ poly(x, degree = 9), data = sim_data)
# get predictions
predictions[sim, 1] = predict(fit_0, x)
predictions[sim, 2] = predict(fit_1, x)
predictions[sim, 3] = predict(fit_2, x)
predictions[sim, 4] = predict(fit_9, x)
}
predictions
sim
res = data.frame(
degree= factor(rep(c(0,1,2,9),each=250)),
predictions = c(predictions[,1],
predictions[,2],
predictions[,3],
predictions[,4]
)
)
res
ggplot(res) +
geom_boxplot(aes(x=degree, y=predictions))+theme_bw()
ggplot(res) +
geom_boxplot(aes(x=degree, y=predictions,color=dose))+theme_bw()
ggplot(res) +
geom_boxplot(aes(x=degree, y=predictions,color=degree))+theme_bw()
ggplot(res) +
geom_boxplot(aes(x=degree, y=predictions,fill=degree))+theme_bw()
ggplot(res) +
geom_boxplot(aes(x=degree, y=predictions,fill=degree))+theme_bw()+
geom_hbline(yintercept=0.81)
ggplot(res) +
geom_boxplot(aes(x=degree, y=predictions,fill=degree))+theme_bw()+
geom_hline(yintercept=0.81)
install.packages("gettingtothebottom")
install.packages("gettingtothebottom")
install.package("gradDescent")
install.packages("gradDescent")
?loess
-2^(1/3)
-(2^(1/3))
-(8^(1/3))
(-8^(1/3))
(-8)^(1/3)
-8^(1/3); (-8)^(1/3)
-8^(1/3); (-8)^(1/3)
5 %% 3
data("iris")
View(iris)
data("iris")
rstudioapi::viewer("http://localhost:8100")
tempDir <- tempfile()
dir.create(tempDir)
htmlFile <- file.path(tempDir, "index.html")
# (code to write some content to the file)
viewer <- getOption("viewer")
viewer(htmlFile)
viewer <- getOption("viewer")
viewer("http://localhost:8000")
getwd()
dat = read.table("tabela2.1.txt", head = TRUE)
dat = read.table("tabela2.1.txt", sep=";",header = TRUE)
head(dat)
View("tabela2.1.txt")
View(tabela2.1.txt)
View(dat)
remotes::install_github(c('rstudio/pagedown', 'yihui/xaringan'))
pagedown::chrome_print('Aula1.html')
?chrome_print
?chrome_print
pagedown::chrome_print('Aula1.html')
pagedown::chrome_print('Aula1.html')
pagedown::chrome_print('Aula1.html')
pagedown::chrome_print('Aula1.html')
rmarkdown::render("Aula1.qmd")
pagedown::chrome_print("Aula1.html")
rmarkdown::render("Aula1.Rmd")
rmarkdown::render("Aula1.qmd")
pagedown::chrome_print("Aula1.html")
rmarkdown::render("Aula1.qmd")
pagedown::chrome_print("Aula1.html")
pagedown::chrome_print("Aula1.html")
rmarkdown::render("Aula1.qmd")
pagedown::chrome_print("Aula1.html")
rmarkdown::render("Aula1.qmd")
pagedown::chrome_print("Aula1.html")
rmarkdown::render("Aula1.qmd")
