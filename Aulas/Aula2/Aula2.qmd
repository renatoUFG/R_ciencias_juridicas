---
title: "Aula 2"
author: "Renato Rodrigues Silva"
format:
  revealjs:
    smaller: true
    scrollable: true
    theme: serif
---

## Objetivo da aula {.center}

-   O objetivo da segunda aula é ensinar ao aluno:

-   O layout do RStudio;

-   Comandos básico do R.

------------------------------------------------------------------------

## Roteiro da aula {.center}

-   Layout do RStudio;

-   Como utilizar o R como calculadora

-   Principais objetos no R

    -   vector;
    -   matrix;
    -   arrays;
    -   data.frame;
    -   lists

------------------------------------------------------------------------

## Layout do RStudio {.center}

[![](Aula2_files/figure-html/Fig1.jpeg){fig-align="center" width="75%"}](https://docs.posit.co/ide/user/ide/guide/ui/ui-panes.html)

------------------------------------------------------------------------

## Painel "Source" {.center}

-   O painel "source" permite o usuário ver e editar vários arquivos relacionados a códigos fonte de linguagem de programação, tais como: .R, .rmd, .qmd. .py, entre outros.

------------------------------------------------------------------------

## Criando novos arquivos de código-fonte {.center}

::: columns
::: {.column width="50%"}
![](Aula2_files/figure-html/Fig2.png){fig-align="center"}
:::

::: {.column width="50%"}
![](Aula2_files/figure-html/Fig2b.png){fig-align="center"}
:::
:::

## Destacar a janela {.center}

[![](Aula2_files/figure-html/Fig3.jpeg)](https://docs.posit.co/ide/user/ide/guide/ui/ui-panes.html)

## Painel Console {.center}

-   O painel console provê uma área para exceutar o código interativamente.

-   Por default, o painel console é o software R, mas é possível ter um console python ou até mesmo o terminal.

-   Nesse curso, abordaremos somente o software R.

## Painel "Environment" {.center}

-   O painel "environment" é composto pelas abas: "environment", "history", "connections", "tutorial" e "presentation".

-   Nesse curso, abordaremos apenas as abas "environment" e "history"

## Aba Environment {.center}

-   A aba de ambiente exibe objetos R e Python salvos atualmente.

-   Ainda oferece:

    -   Carregamento ou salvamento de espaços de trabalho do R,
    -   Importação interativa de conjuntos de dados de arquivos de texto, Excel ou SPSS/SAS/Stata.
    -   Memória atualmente utilizada pela sessão ativa do R.
    -   Ícone de vassoura para remover todos os objetos do ambiente atual.

## Aba Environment {.center}

![](Aula2_files/figure-html/Fig4.png){fig-align="center"}

## Aba Environment {.center}

![](Aula2_files/figure-html/Fig5.png){fig-align="center"}

## Aba Environment {.center}

![](Aula2_files/figure-html/Fig6.png){fig-align="center"}

## A aba "History" {.center}

-   Exibe os comandos que foram executados na sessão atual junto com a funcionalidade de pesquisa.

-   Existem botões para carregar/salvar o histórico de comandos em um arquivo,

-   Além de enviar o comando selecionado para o console ou inseri-lo no documento de trabalho atual.

-   Há um botão de exclusão para remover o histórico selecionado

-   Ou há um botão de vassoura para apagar todo o histórico da sessão atual.

## A aba "History"

![](Aula2_files/figure-html/Fig7.png){fig-align="center"}

## Painel Output {.center}

-   Esse painel é composto pelas abas: files, plots, packages, help and viewer.

    -   Aba Files oferece exploração interativa do projeto atual do R junto com todo o diretório.

    -   Aba Plots exibe imagens estáticas geradas pelo código.

    -   Aba Packages permite visualizar os pacotes R atualmente instalados e possui uma barra de pesquisa para buscar na biblioteca atual de pacotes.

    -   Aba Help é usada para exibir a documentação dos pacotes.

    -   Aba Viewer é usada para mostrar o conteúdo de aplicações em Web, como Shiny Apps.

## A aba "Packages" {.center}

![](Aula2_files/figure-html/Fig8.png){fig-align="center"}

## A aba "Help" {.center}

![](Aula2_files/figure-html/Fig9.png){fig-align="center"}

## R como calculadora {.center}

O software R é baseado em linhas de comandos. A seguir vamos mostrar como podemos fazer operações básicas de matemática.

```{r}
#| eval: true
#| echo: true
#Adição
1 + 1
#Subtração
2 - 1
#Multiplicação
3 * 2
#Divisão
80 / 100
#Potenciação
2 ^ 3
#Raiz Quadrada
sqrt(49)

```

## R como calculadora {.center}

Observe como o R responde em algumas situações

```{r}
#| eval: true
#| echo: true
#Divisão por zero
1 / 0

#Raiz quadrada para números negativos
sqrt(-1)

#Arredondar número para seis casas decimais
round(pi,6)
```

## Criar objetos no R {.center}

-   Os nomes de objetos devem começar com uma letra. Eles podem conter somente letras, bem como podem conter letras, números, _ e .. 


```{r}
#| eval: true
#| echo: true

x = 3

y = 2

x + y

```


## Vetores {.center}

Conjunto de elementos do mesmo tipo (logical, numeric, integer, double character)

##  Formas de declarar vetores {.center}

-   A forma mais simples de se criar um vetor é usar a  função de concatenação ``c()''.

```{r}
#| eval: true
#| echo: true
#| 
value.num  = c(3,4,2,6,20)

value.num

value.char = c("koala", "kangaroo")

value.char

value.logical = c(FALSE, FALSE, TRUE, TRUE)

value.logical
```


##  Formas de declarar vetores {.center}

-   Segunda maneira de criar vetor no R: usando a  função ``scan''

```{r}
#| eval: true
#| echo: true

values = scan(text="
2
3
4
5"
)

values
```

##  Formas de declarar vetores {.center}

-   Outra opção usando comando ``rep''

```{r}
#| eval: true
#| echo: true

rep(1,5)

rep(c(1,2),3)

rep(c(1,6),each=3)

rep(c(1,6),c(3,5))

```

##  Formas de declarar vetores {.center}

-   Outra opção usando comando ``seq''

```{r}
#| eval: true
#| echo: true

seq(from=1,to=5)

seq(from=1, to=5, by=0.1)

seq(from=1, to=5, length=10)

rep(seq(from=1, to=5, length=10),each=2)


```

##  Formas de declarar vetores {.center}

-   Outra opção usando comando ``:''

```{r}
#| eval: true
#| echo: true


1:5

c(1:5,10)


```


## Operações com Vetores {.center}

```{r}
#| eval: true
#| echo: true

x = 1:4

y = 5:8

x + y

2 * x + 1

x * y

x / y

sum(x)

mean(x)

prod(x)

var(x)

```

##    Matriz {.center}

-   Conjunto de elementos dispostos em linhas e colunas, em que todos os elementos são do mesmo tipo

```{r}
#| eval: true
#| echo: true

mat.num  = matrix(c(1:16),4,4)

mat.num

mat.char = matrix(LETTERS[1:4],2,2)

mat.char


```

##  Manipulando Matrizes {.center}

```{r}
#| eval: true
#| echo: true

#Criando nomes para as linhas de uma matriz
rownames(mat.num) = c("Sao Paulo", "Americana", "Piracicaba", "Madson" )

colnames(mat.num) = 1:4

mat.num

```


##  Multiplicação elemento a elemento {.center}

```{r}
#| eval: true
#| echo: true


mat.num2 = diag(seq(10,40,by=10))

mat.num2

mat.num3 = mat.num * mat.num2

mat.num3

```

##    Acessando elementos das matrizes 

```{r}
#| eval: true
#| echo: true


#Um elemento
mat.num[1,1]

#Linhas 
mat.num[1,]

#Colunas
mat.num[,3]

#Sub Matrizes

mat.num[c(1,3,4), c(2,1,4)]

mat.num[c(T,F,T,T), c(T,T,F,T)]

mat.num[-c(1,3,4), -c(2,1,4)]

```



##    Data.frames {.center}

São Similares as matrizes no entanto permite que as colunas tenham diferentes tipos


```{r}
#| eval: true
#| echo: true


data(iris)

iris

```

##    Manipulação de Data.frames {.center}

```{r}
#| eval: true
#| echo: true


iris$Sepal.Length
```

##    Manipulação de Data.frames {.center}

```{r}
#| eval: true
#| echo: true

iris$Renato = TRUE

iris


```

##    List {.center}

Generalização dos vetores no sentido que uma lista é uma coleção de objetos

```{r}
#| eval: true
#| echo: true


A = list(x = 1:4, y = matrix(1:4,2,2),  v = list(A=4,B=5))

A

```



##   Manipulação de objetos tipo  List {.center}

```{r}
#| eval: true
#| echo: true


A[[1]]

A[[3]]

A$x

A$y

```



##  Manipulação de objetos tipo  List {.center}

```{r}
#| eval: true
#| echo: true


B = list(s = 1:5, r = 2)

Q = c(A,B)

Q

```


